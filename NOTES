## 1 installing Redux

- npm i redux
- npm i redux react-redux
- npm i @reduxjs/toolkit

/////////////////////////////////////////////////////////////////////////////////////////////////////////

## 2 Creating/Providing Redux Store for React

- "store" (Folder created)
  => "index.js" (file inside folder)
  => Using "configureStore"

-------------------------------------------------------- import { configureStore } from "@reduxjs/toolkit";
Replace "createStore"(deprecated) with "configureStore"

- "index.js"
  => Importing "store" data (Highest level of the application)

-------------------------------------------------------- import store from './storeLocation'
-------------------------------------------------------- import {Provider} from 'react-redux'
(Providing the Store)
<Provider store={store}> <App /> </Provider>

/////////////////////////////////////////////////////////////////////////////////////////////////////////

## 3 Using Redux data in other components

- "Counter.js"
  => useSelector => to get "store" data

-------------------------------------------------------- import { useSelector } from "react-redux"
redux method to get "store" data

/////////////////////////////////////////////////////////////////////////////////////////////////////////

## 4 Dispatching actions from another component

- "Counter.js"
  => using "useDispatch"

-------------------------------------------------------- import { useDispatch } from "react-redux"
const dispatch = useDispatch()
=> Call dispatch inside another function
=> dispatch({ type: })

/////////////////////////////////////////////////////////////////////////////////////////////////////////

## 5 Redux with Class-Based Components

- "Counter.js"
  => Created a class Component
  => Using "connect()"

-------------------------------------------------------- import {Component} from 'react'
to crease class-based component

-------------------------------------------------------- import { connect } from "react-redux"
to use redux in class-based components

**\*\*\*** REMEMBER **\*\*\***
In class-components functions/methods
=> in the JSX, use ".bind(this)" to the functions

/////////////////////////////////////////////////////////////////////////////////////////////////////////

## 6 Attaching Payloads to Actions

=> Dynamically changing dispatch values

- "Counter.js"
  => Adding second value to "dispatch()"

**\*** Important **\***
All data inside "dispatch({data})" is accessible as "action.data" in the "redux" component

/////////////////////////////////////////////////////////////////////////////////////////////////////////

## 7 Working with useState(true/false) in Redux

- "Counter.js"
  => created a "dispatch()" to toggle "true/false"

- "index.js"
  => added into the initialState (default value) "showCounter: true/false"
  => added action.type for the toggle "dispatch"

**\*** Important **\***
All initialState data should be return when "action.type" is handled
=> Because it returns a new one

/////////////////////////////////////////////////////////////////////////////////////////////////////////

## 8 Working with Redux State Correctly

**\*** IMPORTANT **\***

- Never Change/Override the original "initialState"
- Always return a new copy of the state with the changes {return {data}}

- "index.js"
  => Reason why we returned everything when handling "action type"

/////////////////////////////////////////////////////////////////////////////////////////////////////////

## 9 Using Redux Toolkit "createSlice" for better "action.type" handling

=> Creating redux function

- "index.js"
  => using "createSlice" to replace all "action.type" (handlings)

------------------------------------------------------- npm i @reduxjs/toolkit
Replace with "npm i redux"

------------------------------------------------------- import { createSlice } from "@reduxjs/toolkit"

/////////////////////////////////////////////////////////////////////////////////////////////////////////

## 10 Connecting "createSlice"

- "index.js"
  => "configureStore({})" to connect "createSlice()" to a variable

/////////////////////////////////////////////////////////////////////////////////////////////////////////

## 11 Migrating/Consuming Redux ToolKit State

- "index.js"
  => exporting "createSlice" functionality

- "Counter.js"
  => imported "createSlice.actions"

------------------------------------------------------- export const anyName = function.actions
exporting "createSlice.reducers"

------------------------------------------------------- import { anyName } from "fileLocation"
anyName.aFunctionFromcreateSlice => to access "createSlice.reducers"

/////////////////////////////////////////////////////////////////////////////////////////////////////////

## 12 Working with multiple slices

- "index.js"
  => Create new "createSlice()" for authentication functionality
  => Added new "slice" to "configureStore({reducer})"

- "Header.js"
  => Implemented/added new auth Slice

- "Auth.js"
  => Implemented/added new auth Slice

/////////////////////////////////////////////////////////////////////////////////////////////////////////

## 13 Splitting/Refactoring Redux Component

=> Splitting/Creating every Slice into its own file

- Splitted "index.js"
  => "auth.js"
  => "counter.js
